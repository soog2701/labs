{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.684e332807e7e0fbd15b.hot-update.js","sources":["webpack:///./redux/saga.js"],"sourcesContent":["/* global fetch */\n\nimport { all, call, delay, put, take, takeLatest, fork, race } from 'redux-saga/effects'\n// import {take, call, put, fork, race} from 'redux-saga/effects'\nimport es6promise from 'es6-promise'\nimport 'isomorphic-unfetch'\n\n// import { actionTypes, failureLogin, successLogin, failureLogout, successLogout } from './module/login'\n\nimport {\n  SENDING_REQUEST,\n  LOGIN_REQUEST,\n  REGISTER_REQUEST,\n  SET_AUTH,\n  LOGOUT,\n  CHANGE_FORM,\n  REQUEST_ERROR\n} from './module/login'\n\nconst auth = {\n  login (username, password) {\n    // if (auth.loggedIn()) return Promise.resolve(true)\n\n    // // Post a fake request\n    // return request.post('/login', {username, password})\n    //   .then(response => {\n    //     // Save token to local storage\n    //     localStorage.token = response.token\n    //     return Promise.resolve(true)\n    //   })\n    console.log({username, password})\n  },\n  register (username, password) {\n    // Post a fake request\n    // return request.post('/register', {username, password})\n    //   // Log user in after registering\n    //   .then(() => auth.login(username, password))\n    console.log('register ===')\n    auth.login(username, password)\n  },\n}\n\nes6promise.polyfill();\n\n// function * loginSaga() {\n//   const action = yield take(\"LOGIN_REQUEST\");\n//   const { name, password } = action.payload;\n//   try {\n//     yield call(api.login, name, password);\n//   } catch (err) {\n//     yield put(failureLogin(err));\n//     return;\n//   }\n//   yield put(successLogin());\n// }\n\nexport function * authorize ({username, password, isRegistering}) {\n  yield put({type: SENDING_REQUEST, sending: true})\n\n  try {\n    // const salt = genSalt(username)\n    // const hash = hashSync(password, salt)\n    const salt = '1username'\n    const hash = '2password'\n    let response\n\n    if (isRegistering) {\n      response = yield call(auth.register, username, hash)\n    } else {\n      response = yield call(auth.login, username, hash)\n    }\n\n    return response\n  } catch (error) {\n    console.log('hi')\n    yield put({type: REQUEST_ERROR, error: error.message})\n\n    return false\n  } finally {\n    yield put({type: SENDING_REQUEST, sending: false})\n  }\n}\n\nexport function * loginFlow () {\n  \n  while (true) {\n    const request = yield take(LOGIN_REQUEST)\n    const {username, password} = request.data\n\n    const winner = yield race({\n      auth: call(authorize, {username, password, isRegistering: false}),\n      logout: take(LOGOUT)\n    })\n\n    if (winner.auth) {\n      yield put({type: SET_AUTH, newAuthState: true}) // User is logged in (authorized)\n      yield put({type: CHANGE_FORM, newFormState: {username: '', password: ''}}) // Clear form\n      forwardTo('/dashboard') // Go to dashboard page\n    }\n  }\n}\n\n\nexport function * registerFlow () {\n  while (true) {\n    const request = yield take(REGISTER_REQUEST)\n    const {username, password} = request.data\n\n    const wasSuccessful = yield call(authorize, {username, password, isRegistering: true})\n\n    if (wasSuccessful) {\n      yield put({type: SET_AUTH, newAuthState: true}) // User is logged in (authorized) after being registered\n      yield put({type: CHANGE_FORM, newFormState: {username: '', password: ''}}) // Clear form\n      forwardTo('/dashboard') // Go to dashboard page\n    }\n  }\n}\n\nfunction * rootSaga () {\n  // yield all([\n  //   call(loginSaga),\n  //   // takeLatest(actionTypes.LOAD_DATA, loadDataSaga)\n  // ])\n  yield fork(loginFlow)\n  // yield fork(logoutFlow)\n  yield fork(registerFlow)\n}\n\n// export default rootSaga\nexport default rootSaga"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAwDA;;;AA2BA;;;AAoBA;;;AAeA;AACA;AAvHA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAUA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AAuBA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAFA;AAAA;AAIA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AACA;AADA;AAWA;AACA;AAZA;AAWA;AAXA;AAAA;AACA;AADA;AAAA;AAaA;AACA;AAdA;AAaA;AACA;AAdA;AAAA;AACA;AADA;AAAA;AAAA;AAkBA;AAlBA;AAmBA;AAAA;AAAA;AAAA;AACA;AApBA;AAAA;AACA;AADA;AAAA;AAAA;AAuBA;AAAA;AAAA;AAAA;AACA;AAxBA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2BA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AAJA;AAGA;AAHA;AAAA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AACA;AAPA;AAMA;AACA;AAPA;AAAA;AAAA;AAAA;AACA;AADA;AAYA;AAAA;AAAA;AAAA;AACA;AAbA;AAAA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAdA;AAaA;AACA;AACA;AAfA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAHA;AAEA;AAFA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AANA;AAKA;AACA;AANA;AAAA;AAAA;AAAA;AACA;AADA;AAQA;AAAA;AAAA;AAAA;AACA;AATA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAVA;AASA;AACA;AACA;AAXA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AANA;AAAA;AAOA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AASA;;;;A","sourceRoot":""}