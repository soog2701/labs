{"ast":null,"code":"// 액션 타입 정의\nexport var actionTypes = {\n  LOGIN_REQUEST: 'LOGIN_REQUEST',\n  FAILURELOGIN: 'FAILURELOGIN',\n  SUCCESSLOGIN: 'SUCCESSLOGIN',\n  FAILURELOGOUT: 'FAILURELOGOUT',\n  SUCCESSLOGOUT: 'SUCCESSLOGOUT'\n};\nexport var CHANGE_FORM = 'CHANGE_FORM';\nexport var SET_AUTH = 'SET_AUTH';\nexport var SENDING_REQUEST = 'SENDING_REQUEST';\nexport var LOGIN_REQUEST = 'LOGIN_REQUEST';\nexport var REGISTER_REQUEST = 'REGISTER_REQUEST';\nexport var LOGOUT = 'LOGOUT';\nexport var REQUEST_ERROR = 'REQUEST_ERROR';\nexport var CLEAR_ERROR = 'CLEAR_ERROR'; // **** 액션 생섬함수 정의\n// export const loginRequest = (name, password) => ({\n//     type: actionTypes.LOGIN_REQUEST,\n//     name, \n//     password\n// });\n// export const failureLogin = error => ({\n//     type: actionTypes.FAILURELOGIN,\n//     error\n// });\n// export const successLogin = () => ({\n//     type: actionTypes.SUCCESSLOGIN\n// });\n// export const failureLogout = error => ({\n//     type: actionTypes.FAILURELOGOUT,\n//     error\n// })\n// export const successLogout = () => ({\n//     type: actionTypes.SUCCESSLOGOUT\n// })\n// // **** 초기상태 정의\n// const loginInitialState = {\n//     login: false,\n//     error: false,\n// }\n// // **** 리듀서 작성\n\nfunction reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : loginInitialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    // case actionTypes.FAILURELOGIN:\n    //     return {\n    //         ...state,\n    //         ...{ error: action.error ,login: false }\n    //     }\n    // case actionTypes.SUCCESSLOGIN:\n    //     return {\n    //         ...state,\n    //         ...{ login: true }\n    //     }\n    // case actionTypes.FAILURELOGOUT:\n    //     return {\n    //         ...state,\n    //         ...{ error: action.error, login: false }\n    //     }\n    // case actionTypes.SUCCESSLOGOUT:\n    //     return {\n    //         ...state,\n    //         ...{ login: false }\n    //     }\n    default:\n      return state;\n  }\n}\n/**\n * Sets the form state\n * @param  {object} newFormState          The new state of the form\n * @param  {string} newFormState.username The new text of the username input field of the form\n * @param  {string} newFormState.password The new text of the password input field of the form\n */\n\n\nexport function changeForm(newFormState) {\n  return {\n    type: CHANGE_FORM,\n    newFormState: newFormState\n  };\n}\n/**\n * Sets the authentication state of the application\n* @param  {boolean} newAuthState True means a user is logged in, false means no user is logged in\n*/\n\nexport function setAuthState(newAuthState) {\n  return {\n    type: SET_AUTH,\n    newAuthState: newAuthState\n  };\n}\n/**\n   * Sets the `currentlySending` state, which displays a loading indicator during requests\n   * @param  {boolean} sending True means we're sending a request, false means we're not\n   */\n\nexport function sendingRequest(sending) {\n  return {\n    type: SENDING_REQUEST,\n    sending: sending\n  };\n}\n/**\n   * Tells the app we want to log in a user\n   * @param  {object} data          The data we're sending for log in\n   * @param  {string} data.username The username of the user to log in\n   * @param  {string} data.password The password of the user to log in\n   */\n\nexport function loginRequest(data) {\n  return {\n    type: LOGIN_REQUEST,\n    data: data\n  };\n}\n/**\n   * Tells the app we want to log out a user\n   */\n\nexport function logout() {\n  return {\n    type: LOGOUT\n  };\n}\n/**\n   * Tells the app we want to register a user\n   * @param  {object} data          The data we're sending for registration\n   * @param  {string} data.username The username of the user to register\n   * @param  {string} data.password The password of the user to register\n   */\n\nexport function registerRequest(data) {\n  return {\n    type: REGISTER_REQUEST,\n    data: data\n  };\n}\n/**\n   * Sets the `error` state to the error received\n   * @param  {object} error The error we got when trying to make the request\n   */\n\nexport function requestError(error) {\n  return {\n    type: REQUEST_ERROR,\n    error: error\n  };\n}\n/**\n * Sets the `error` state as empty\n */\n\nexport function clearError() {\n  return {\n    type: CLEAR_ERROR\n  };\n}\nexport default reducer;","map":{"version":3,"sources":["C:\\inetpub\\wwwroot\\project\\yeagil_1_repo\\redux\\module\\login.js"],"names":["actionTypes","LOGIN_REQUEST","FAILURELOGIN","SUCCESSLOGIN","FAILURELOGOUT","SUCCESSLOGOUT","CHANGE_FORM","SET_AUTH","SENDING_REQUEST","REGISTER_REQUEST","LOGOUT","REQUEST_ERROR","CLEAR_ERROR","reducer","state","loginInitialState","action","type","changeForm","newFormState","setAuthState","newAuthState","sendingRequest","sending","loginRequest","data","logout","registerRequest","requestError","error","clearError"],"mappings":"AAAA;AACA,OAAO,IAAMA,WAAW,GAAG;AACvBC,EAAAA,aAAa,EAAE,eADQ;AAEvBC,EAAAA,YAAY,EAAE,cAFS;AAGvBC,EAAAA,YAAY,EAAE,cAHS;AAIvBC,EAAAA,aAAa,EAAE,eAJQ;AAKvBC,EAAAA,aAAa,EAAE;AALQ,CAApB;AAOP,OAAO,IAAMC,WAAW,GAAG,aAApB;AACP,OAAO,IAAMC,QAAQ,GAAG,UAAjB;AACP,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,IAAMP,aAAa,GAAG,eAAtB;AACP,OAAO,IAAMQ,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,MAAM,GAAG,QAAf;AACP,OAAO,IAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,IAAMC,WAAW,GAAG,aAApB,C,CAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AACA,SAASC,OAAT,GAAqD;AAAA,MAAnCC,KAAmC,uEAA3BC,iBAA2B;AAAA,MAARC,MAAQ;;AACjD,UAAQA,MAAM,CAACC,IAAf;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,aAAOH,KAAP;AAtBR;AAwBH;AAED;;;;;;;;AAMA,OAAO,SAASI,UAAT,CAAqBC,YAArB,EAAmC;AACtC,SAAO;AAACF,IAAAA,IAAI,EAAEX,WAAP;AAAoBa,IAAAA,YAAY,EAAZA;AAApB,GAAP;AACH;AAED;;;;;AAIA,OAAO,SAASC,YAAT,CAAuBC,YAAvB,EAAqC;AACxC,SAAO;AAACJ,IAAAA,IAAI,EAAEV,QAAP;AAAiBc,IAAAA,YAAY,EAAZA;AAAjB,GAAP;AACH;AAED;;;;;AAIA,OAAO,SAASC,cAAT,CAAyBC,OAAzB,EAAkC;AACrC,SAAO;AAACN,IAAAA,IAAI,EAAET,eAAP;AAAwBe,IAAAA,OAAO,EAAPA;AAAxB,GAAP;AACH;AAED;;;;;;;AAMA,OAAO,SAASC,YAAT,CAAuBC,IAAvB,EAA6B;AAChC,SAAO;AAACR,IAAAA,IAAI,EAAEhB,aAAP;AAAsBwB,IAAAA,IAAI,EAAJA;AAAtB,GAAP;AACH;AAED;;;;AAGA,OAAO,SAASC,MAAT,GAAmB;AACtB,SAAO;AAACT,IAAAA,IAAI,EAAEP;AAAP,GAAP;AACH;AAED;;;;;;;AAMA,OAAO,SAASiB,eAAT,CAA0BF,IAA1B,EAAgC;AACnC,SAAO;AAACR,IAAAA,IAAI,EAAER,gBAAP;AAAyBgB,IAAAA,IAAI,EAAJA;AAAzB,GAAP;AACH;AAED;;;;;AAIA,OAAO,SAASG,YAAT,CAAuBC,KAAvB,EAA8B;AACjC,SAAO;AAACZ,IAAAA,IAAI,EAAEN,aAAP;AAAsBkB,IAAAA,KAAK,EAALA;AAAtB,GAAP;AACH;AAED;;;;AAGA,OAAO,SAASC,UAAT,GAAuB;AAC1B,SAAO;AAACb,IAAAA,IAAI,EAAEL;AAAP,GAAP;AACH;AAED,eAAeC,OAAf","sourcesContent":["// 액션 타입 정의\nexport const actionTypes = {\n    LOGIN_REQUEST: 'LOGIN_REQUEST',\n    FAILURELOGIN: 'FAILURELOGIN',\n    SUCCESSLOGIN: 'SUCCESSLOGIN',\n    FAILURELOGOUT: 'FAILURELOGOUT',\n    SUCCESSLOGOUT: 'SUCCESSLOGOUT',\n}\nexport const CHANGE_FORM = 'CHANGE_FORM'\nexport const SET_AUTH = 'SET_AUTH'\nexport const SENDING_REQUEST = 'SENDING_REQUEST'\nexport const LOGIN_REQUEST = 'LOGIN_REQUEST'\nexport const REGISTER_REQUEST = 'REGISTER_REQUEST'\nexport const LOGOUT = 'LOGOUT'\nexport const REQUEST_ERROR = 'REQUEST_ERROR'\nexport const CLEAR_ERROR = 'CLEAR_ERROR'\n\n// **** 액션 생섬함수 정의\n// export const loginRequest = (name, password) => ({\n//     type: actionTypes.LOGIN_REQUEST,\n//     name, \n//     password\n// });\n// export const failureLogin = error => ({\n//     type: actionTypes.FAILURELOGIN,\n//     error\n// });\n// export const successLogin = () => ({\n//     type: actionTypes.SUCCESSLOGIN\n// });\n// export const failureLogout = error => ({\n//     type: actionTypes.FAILURELOGOUT,\n//     error\n// })\n// export const successLogout = () => ({\n//     type: actionTypes.SUCCESSLOGOUT\n// })\n\n// // **** 초기상태 정의\n// const loginInitialState = {\n//     login: false,\n//     error: false,\n// }\n\n// // **** 리듀서 작성\nfunction reducer (state = loginInitialState, action) {\n    switch (action.type) {\n        // case actionTypes.FAILURELOGIN:\n        //     return {\n        //         ...state,\n        //         ...{ error: action.error ,login: false }\n        //     }\n        // case actionTypes.SUCCESSLOGIN:\n        //     return {\n        //         ...state,\n        //         ...{ login: true }\n        //     }\n        // case actionTypes.FAILURELOGOUT:\n        //     return {\n        //         ...state,\n        //         ...{ error: action.error, login: false }\n        //     }\n        // case actionTypes.SUCCESSLOGOUT:\n        //     return {\n        //         ...state,\n        //         ...{ login: false }\n        //     }\n        default:\n            return state\n    }\n}\n\n/**\n * Sets the form state\n * @param  {object} newFormState          The new state of the form\n * @param  {string} newFormState.username The new text of the username input field of the form\n * @param  {string} newFormState.password The new text of the password input field of the form\n */\nexport function changeForm (newFormState) {\n    return {type: CHANGE_FORM, newFormState}\n}\n  \n/**\n * Sets the authentication state of the application\n* @param  {boolean} newAuthState True means a user is logged in, false means no user is logged in\n*/\nexport function setAuthState (newAuthState) {\n    return {type: SET_AUTH, newAuthState}\n}\n  \n/**\n   * Sets the `currentlySending` state, which displays a loading indicator during requests\n   * @param  {boolean} sending True means we're sending a request, false means we're not\n   */\nexport function sendingRequest (sending) {\n    return {type: SENDING_REQUEST, sending}\n}\n\n/**\n   * Tells the app we want to log in a user\n   * @param  {object} data          The data we're sending for log in\n   * @param  {string} data.username The username of the user to log in\n   * @param  {string} data.password The password of the user to log in\n   */\nexport function loginRequest (data) {\n    return {type: LOGIN_REQUEST, data}\n}\n\n/**\n   * Tells the app we want to log out a user\n   */\nexport function logout () {\n    return {type: LOGOUT}\n}\n\n/**\n   * Tells the app we want to register a user\n   * @param  {object} data          The data we're sending for registration\n   * @param  {string} data.username The username of the user to register\n   * @param  {string} data.password The password of the user to register\n   */\nexport function registerRequest (data) {\n    return {type: REGISTER_REQUEST, data}\n}\n\n/**\n   * Sets the `error` state to the error received\n   * @param  {object} error The error we got when trying to make the request\n   */\nexport function requestError (error) {\n    return {type: REQUEST_ERROR, error}\n}\n\n/**\n * Sets the `error` state as empty\n */\nexport function clearError () {\n    return {type: CLEAR_ERROR}\n}\n\nexport default reducer"]},"metadata":{},"sourceType":"module"}