{"ast":null,"code":"/* global fetch */\nimport { all, call, delay, put, take, takeLatest } from 'redux-saga/effects';\nimport es6promise from 'es6-promise';\nimport 'isomorphic-unfetch'; // import { actionTypes, failureLogin, successLogin, failureLogout, successLogout } from './module/login'\n\nimport { SENDING_REQUEST, LOGIN_REQUEST, REGISTER_REQUEST, SET_AUTH, LOGOUT, CHANGE_FORM, REQUEST_ERROR } from './module/login';\nconst auth = {\n  login(username, password) {\n    // if (auth.loggedIn()) return Promise.resolve(true)\n    // // Post a fake request\n    // return request.post('/login', {username, password})\n    //   .then(response => {\n    //     // Save token to local storage\n    //     localStorage.token = response.token\n    //     return Promise.resolve(true)\n    //   })\n    console.log({\n      username,\n      password\n    });\n  },\n\n  register(username, password) {\n    // Post a fake request\n    // return request.post('/register', {username, password})\n    //   // Log user in after registering\n    //   .then(() => auth.login(username, password))\n    console.log('register ===');\n    auth.login(username, password);\n  }\n\n};\nes6promise.polyfill(); // function * loginSaga() {\n//   const action = yield take(\"LOGIN_REQUEST\");\n//   const { name, password } = action.payload;\n//   try {\n//     yield call(api.login, name, password);\n//   } catch (err) {\n//     yield put(failureLogin(err));\n//     return;\n//   }\n//   yield put(successLogin());\n// }\n\nexport function* authorize({\n  username,\n  password,\n  isRegistering\n}) {\n  yield put({\n    type: SENDING_REQUEST,\n    sending: true\n  });\n\n  try {\n    // const salt = genSalt(username)\n    // const hash = hashSync(password, salt)\n    const salt = '1username';\n    const hash = '2password';\n    let response;\n\n    if (isRegistering) {\n      response = yield call(auth.register, username, hash);\n    } else {\n      response = yield call(auth.login, username, hash);\n    }\n\n    return response;\n  } catch (error) {\n    console.log('hi');\n    yield put({\n      type: REQUEST_ERROR,\n      error: error.message\n    });\n    return false;\n  } finally {\n    yield put({\n      type: SENDING_REQUEST,\n      sending: false\n    });\n  }\n}\nexport function* loginFlow() {\n  while (true) {\n    const request = yield take(LOGIN_REQUEST);\n    const {\n      username,\n      password\n    } = request.data;\n    const winner = yield race({\n      auth: call(authorize, {\n        username,\n        password,\n        isRegistering: false\n      }),\n      logout: take(LOGOUT)\n    });\n\n    if (winner.auth) {\n      yield put({\n        type: SET_AUTH,\n        newAuthState: true\n      }); // User is logged in (authorized)\n\n      yield put({\n        type: CHANGE_FORM,\n        newFormState: {\n          username: '',\n          password: ''\n        }\n      }); // Clear form\n\n      forwardTo('/dashboard'); // Go to dashboard page\n    }\n  }\n}\nexport function* registerFlow() {\n  while (true) {\n    const request = yield take(REGISTER_REQUEST);\n    const {\n      username,\n      password\n    } = request.data;\n    const wasSuccessful = yield call(authorize, {\n      username,\n      password,\n      isRegistering: true\n    });\n\n    if (wasSuccessful) {\n      yield put({\n        type: SET_AUTH,\n        newAuthState: true\n      }); // User is logged in (authorized) after being registered\n\n      yield put({\n        type: CHANGE_FORM,\n        newFormState: {\n          username: '',\n          password: ''\n        }\n      }); // Clear form\n\n      forwardTo('/dashboard'); // Go to dashboard page\n    }\n  }\n}\n\nfunction* rootSaga() {\n  // yield all([\n  //   call(loginSaga),\n  //   // takeLatest(actionTypes.LOAD_DATA, loadDataSaga)\n  // ])\n  yield fork(loginFlow); // yield fork(logoutFlow)\n\n  yield fork(registerFlow);\n} // export default rootSaga\n\n\nexport default rootSaga;","map":{"version":3,"sources":["C:\\inetpub\\wwwroot\\project\\yeagil_1_repo\\redux\\saga.js"],"names":["all","call","delay","put","take","takeLatest","es6promise","SENDING_REQUEST","LOGIN_REQUEST","REGISTER_REQUEST","SET_AUTH","LOGOUT","CHANGE_FORM","REQUEST_ERROR","auth","login","username","password","console","log","register","polyfill","authorize","isRegistering","type","sending","salt","hash","response","error","message","loginFlow","request","data","winner","race","logout","newAuthState","newFormState","forwardTo","registerFlow","wasSuccessful","rootSaga","fork"],"mappings":"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","sourcesContent":["/* global fetch */\n\nimport { all, call, delay, put, take, takeLatest } from 'redux-saga/effects'\nimport es6promise from 'es6-promise'\nimport 'isomorphic-unfetch'\n\n// import { actionTypes, failureLogin, successLogin, failureLogout, successLogout } from './module/login'\n\nimport {\n  SENDING_REQUEST,\n  LOGIN_REQUEST,\n  REGISTER_REQUEST,\n  SET_AUTH,\n  LOGOUT,\n  CHANGE_FORM,\n  REQUEST_ERROR\n} from './module/login'\n\nconst auth = {\n  login (username, password) {\n    // if (auth.loggedIn()) return Promise.resolve(true)\n\n    // // Post a fake request\n    // return request.post('/login', {username, password})\n    //   .then(response => {\n    //     // Save token to local storage\n    //     localStorage.token = response.token\n    //     return Promise.resolve(true)\n    //   })\n    console.log({username, password})\n  },\n  register (username, password) {\n    // Post a fake request\n    // return request.post('/register', {username, password})\n    //   // Log user in after registering\n    //   .then(() => auth.login(username, password))\n    console.log('register ===')\n    auth.login(username, password)\n  },\n}\n\nes6promise.polyfill();\n\n// function * loginSaga() {\n//   const action = yield take(\"LOGIN_REQUEST\");\n//   const { name, password } = action.payload;\n//   try {\n//     yield call(api.login, name, password);\n//   } catch (err) {\n//     yield put(failureLogin(err));\n//     return;\n//   }\n//   yield put(successLogin());\n// }\n\nexport function * authorize ({username, password, isRegistering}) {\n  yield put({type: SENDING_REQUEST, sending: true})\n\n  try {\n    // const salt = genSalt(username)\n    // const hash = hashSync(password, salt)\n    const salt = '1username'\n    const hash = '2password'\n    let response\n\n    if (isRegistering) {\n      response = yield call(auth.register, username, hash)\n    } else {\n      response = yield call(auth.login, username, hash)\n    }\n\n    return response\n  } catch (error) {\n    console.log('hi')\n    yield put({type: REQUEST_ERROR, error: error.message})\n\n    return false\n  } finally {\n    yield put({type: SENDING_REQUEST, sending: false})\n  }\n}\n\nexport function * loginFlow () {\n  \n  while (true) {\n    const request = yield take(LOGIN_REQUEST)\n    const {username, password} = request.data\n\n    const winner = yield race({\n      auth: call(authorize, {username, password, isRegistering: false}),\n      logout: take(LOGOUT)\n    })\n\n    if (winner.auth) {\n      yield put({type: SET_AUTH, newAuthState: true}) // User is logged in (authorized)\n      yield put({type: CHANGE_FORM, newFormState: {username: '', password: ''}}) // Clear form\n      forwardTo('/dashboard') // Go to dashboard page\n    }\n  }\n}\n\n\nexport function * registerFlow () {\n  while (true) {\n    const request = yield take(REGISTER_REQUEST)\n    const {username, password} = request.data\n\n    const wasSuccessful = yield call(authorize, {username, password, isRegistering: true})\n\n    if (wasSuccessful) {\n      yield put({type: SET_AUTH, newAuthState: true}) // User is logged in (authorized) after being registered\n      yield put({type: CHANGE_FORM, newFormState: {username: '', password: ''}}) // Clear form\n      forwardTo('/dashboard') // Go to dashboard page\n    }\n  }\n}\n\nfunction * rootSaga () {\n  // yield all([\n  //   call(loginSaga),\n  //   // takeLatest(actionTypes.LOAD_DATA, loadDataSaga)\n  // ])\n  yield fork(loginFlow)\n  // yield fork(logoutFlow)\n  yield fork(registerFlow)\n}\n\n// export default rootSaga\nexport default rootSaga"]},"metadata":{},"sourceType":"module"}