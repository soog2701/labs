{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(authorize),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loginFlow),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(registerFlow),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga);\n\n/* global fetch */\nimport { all, call, delay, put, take, takeLatest, fork, race } from 'redux-saga/effects'; // import {take, call, put, fork, race} from 'redux-saga/effects'\n\nimport es6promise from 'es6-promise';\nimport 'isomorphic-unfetch'; // import { actionTypes, failureLogin, successLogin, failureLogout, successLogout } from './module/login'\n\nimport { SENDING_REQUEST, LOGIN_REQUEST, REGISTER_REQUEST, SET_AUTH, LOGOUT, CHANGE_FORM, REQUEST_ERROR } from './module/login';\nvar auth = {\n  login: function login(username, password) {\n    // if (auth.loggedIn()) return Promise.resolve(true)\n    // // Post a fake request\n    // return request.post('/login', {username, password})\n    //   .then(response => {\n    //     // Save token to local storage\n    //     localStorage.token = response.token\n    //     return Promise.resolve(true)\n    //   })\n    console.log({\n      username: username,\n      password: password\n    });\n  },\n  register: function register(username, password) {\n    // Post a fake request\n    // return request.post('/register', {username, password})\n    //   // Log user in after registering\n    //   .then(() => auth.login(username, password))\n    console.log('register ===');\n    auth.login(username, password);\n  }\n};\nes6promise.polyfill(); // function * loginSaga() {\n//   const action = yield take(\"LOGIN_REQUEST\");\n//   const { name, password } = action.payload;\n//   try {\n//     yield call(api.login, name, password);\n//   } catch (err) {\n//     yield put(failureLogin(err));\n//     return;\n//   }\n//   yield put(successLogin());\n// }\n\nexport function authorize(_ref) {\n  var username, password, isRegistering, salt, hash, response;\n  return _regeneratorRuntime.wrap(function authorize$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          username = _ref.username, password = _ref.password, isRegistering = _ref.isRegistering;\n          _context.next = 3;\n          return put({\n            type: SENDING_REQUEST,\n            sending: true\n          });\n\n        case 3:\n          _context.prev = 3;\n          // const salt = genSalt(username)\n          // const hash = hashSync(password, salt)\n          salt = '1username';\n          hash = '2password';\n\n          if (!isRegistering) {\n            _context.next = 12;\n            break;\n          }\n\n          _context.next = 9;\n          return call(auth.register, username, hash);\n\n        case 9:\n          response = _context.sent;\n          _context.next = 15;\n          break;\n\n        case 12:\n          _context.next = 14;\n          return call(auth.login, username, hash);\n\n        case 14:\n          response = _context.sent;\n\n        case 15:\n          return _context.abrupt(\"return\", response);\n\n        case 18:\n          _context.prev = 18;\n          _context.t0 = _context[\"catch\"](3);\n          console.log('hi');\n          _context.next = 23;\n          return put({\n            type: REQUEST_ERROR,\n            error: _context.t0.message\n          });\n\n        case 23:\n          return _context.abrupt(\"return\", false);\n\n        case 24:\n          _context.prev = 24;\n          _context.next = 27;\n          return put({\n            type: SENDING_REQUEST,\n            sending: false\n          });\n\n        case 27:\n          return _context.finish(24);\n\n        case 28:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[3, 18, 24, 28]]);\n}\nexport function loginFlow() {\n  var request, _request$data, username, password, winner;\n\n  return _regeneratorRuntime.wrap(function loginFlow$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!true) {\n            _context2.next = 16;\n            break;\n          }\n\n          _context2.next = 3;\n          return take(LOGIN_REQUEST);\n\n        case 3:\n          request = _context2.sent;\n          _request$data = request.data, username = _request$data.username, password = _request$data.password;\n          _context2.next = 7;\n          return race({\n            auth: call(authorize, {\n              username: username,\n              password: password,\n              isRegistering: false\n            }),\n            logout: take(LOGOUT)\n          });\n\n        case 7:\n          winner = _context2.sent;\n\n          if (!winner.auth) {\n            _context2.next = 14;\n            break;\n          }\n\n          _context2.next = 11;\n          return put({\n            type: SET_AUTH,\n            newAuthState: true\n          });\n\n        case 11:\n          _context2.next = 13;\n          return put({\n            type: CHANGE_FORM,\n            newFormState: {\n              username: '',\n              password: ''\n            }\n          });\n\n        case 13:\n          // Clear form\n          forwardTo('/dashboard'); // Go to dashboard page\n\n        case 14:\n          _context2.next = 0;\n          break;\n\n        case 16:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\nexport function registerFlow() {\n  var request, _request$data2, username, password, wasSuccessful;\n\n  return _regeneratorRuntime.wrap(function registerFlow$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (!true) {\n            _context3.next = 16;\n            break;\n          }\n\n          _context3.next = 3;\n          return take(REGISTER_REQUEST);\n\n        case 3:\n          request = _context3.sent;\n          _request$data2 = request.data, username = _request$data2.username, password = _request$data2.password;\n          _context3.next = 7;\n          return call(authorize, {\n            username: username,\n            password: password,\n            isRegistering: true\n          });\n\n        case 7:\n          wasSuccessful = _context3.sent;\n\n          if (!wasSuccessful) {\n            _context3.next = 14;\n            break;\n          }\n\n          _context3.next = 11;\n          return put({\n            type: SET_AUTH,\n            newAuthState: true\n          });\n\n        case 11:\n          _context3.next = 13;\n          return put({\n            type: CHANGE_FORM,\n            newFormState: {\n              username: '',\n              password: ''\n            }\n          });\n\n        case 13:\n          // Clear form\n          forwardTo('/dashboard'); // Go to dashboard page\n\n        case 14:\n          _context3.next = 0;\n          break;\n\n        case 16:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return fork(loginFlow);\n\n        case 2:\n          _context4.next = 4;\n          return fork(registerFlow);\n\n        case 4:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n} // export default rootSaga\n\n\nexport default rootSaga;","map":{"version":3,"sources":["C:\\inetpub\\wwwroot\\project\\yeagil_1_repo\\redux\\saga.js"],"names":["authorize","loginFlow","registerFlow","rootSaga","all","call","delay","put","take","takeLatest","fork","race","es6promise","SENDING_REQUEST","LOGIN_REQUEST","REGISTER_REQUEST","SET_AUTH","LOGOUT","CHANGE_FORM","REQUEST_ERROR","auth","login","username","password","console","log","register","polyfill","isRegistering","type","sending","salt","hash","response","error","message","request","data","logout","winner","newAuthState","newFormState","forwardTo","wasSuccessful"],"mappings":"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","sourcesContent":["/* global fetch */\n\nimport { all, call, delay, put, take, takeLatest, fork, race } from 'redux-saga/effects'\n// import {take, call, put, fork, race} from 'redux-saga/effects'\nimport es6promise from 'es6-promise'\nimport 'isomorphic-unfetch'\n\n// import { actionTypes, failureLogin, successLogin, failureLogout, successLogout } from './module/login'\n\nimport {\n  SENDING_REQUEST,\n  LOGIN_REQUEST,\n  REGISTER_REQUEST,\n  SET_AUTH,\n  LOGOUT,\n  CHANGE_FORM,\n  REQUEST_ERROR\n} from './module/login'\n\nconst auth = {\n  login (username, password) {\n    // if (auth.loggedIn()) return Promise.resolve(true)\n\n    // // Post a fake request\n    // return request.post('/login', {username, password})\n    //   .then(response => {\n    //     // Save token to local storage\n    //     localStorage.token = response.token\n    //     return Promise.resolve(true)\n    //   })\n    console.log({username, password})\n  },\n  register (username, password) {\n    // Post a fake request\n    // return request.post('/register', {username, password})\n    //   // Log user in after registering\n    //   .then(() => auth.login(username, password))\n    console.log('register ===')\n    auth.login(username, password)\n  },\n}\n\nes6promise.polyfill();\n\n// function * loginSaga() {\n//   const action = yield take(\"LOGIN_REQUEST\");\n//   const { name, password } = action.payload;\n//   try {\n//     yield call(api.login, name, password);\n//   } catch (err) {\n//     yield put(failureLogin(err));\n//     return;\n//   }\n//   yield put(successLogin());\n// }\n\nexport function * authorize ({username, password, isRegistering}) {\n  yield put({type: SENDING_REQUEST, sending: true})\n\n  try {\n    // const salt = genSalt(username)\n    // const hash = hashSync(password, salt)\n    const salt = '1username'\n    const hash = '2password'\n    let response\n\n    if (isRegistering) {\n      response = yield call(auth.register, username, hash)\n    } else {\n      response = yield call(auth.login, username, hash)\n    }\n\n    return response\n  } catch (error) {\n    console.log('hi')\n    yield put({type: REQUEST_ERROR, error: error.message})\n\n    return false\n  } finally {\n    yield put({type: SENDING_REQUEST, sending: false})\n  }\n}\n\nexport function * loginFlow () {\n  \n  while (true) {\n    const request = yield take(LOGIN_REQUEST)\n    const {username, password} = request.data\n\n    const winner = yield race({\n      auth: call(authorize, {username, password, isRegistering: false}),\n      logout: take(LOGOUT)\n    })\n\n    if (winner.auth) {\n      yield put({type: SET_AUTH, newAuthState: true}) // User is logged in (authorized)\n      yield put({type: CHANGE_FORM, newFormState: {username: '', password: ''}}) // Clear form\n      forwardTo('/dashboard') // Go to dashboard page\n    }\n  }\n}\n\n\nexport function * registerFlow () {\n  while (true) {\n    const request = yield take(REGISTER_REQUEST)\n    const {username, password} = request.data\n\n    const wasSuccessful = yield call(authorize, {username, password, isRegistering: true})\n\n    if (wasSuccessful) {\n      yield put({type: SET_AUTH, newAuthState: true}) // User is logged in (authorized) after being registered\n      yield put({type: CHANGE_FORM, newFormState: {username: '', password: ''}}) // Clear form\n      forwardTo('/dashboard') // Go to dashboard page\n    }\n  }\n}\n\nfunction * rootSaga () {\n  // yield all([\n  //   call(loginSaga),\n  //   // takeLatest(actionTypes.LOAD_DATA, loadDataSaga)\n  // ])\n  yield fork(loginFlow)\n  // yield fork(logoutFlow)\n  yield fork(registerFlow)\n}\n\n// export default rootSaga\nexport default rootSaga"]},"metadata":{},"sourceType":"module"}